{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/thesugar/next-firebase-memo-app/components/Address.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Router from 'next/router';\nimport firebase from \"firebase\";\nimport Lib from '../static/address_lib';\nimport Account from '../components/Account';\n\nclass Address extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"style\", {\n      fontSize: \"12pt\",\n      padding: \"5px 10px\"\n    });\n\n    this.logined = this.logined.bind(this);\n  } // login, logout 処理\n\n\n  logined() {\n    this.getFireData();\n  }\n\n  logouted() {\n    Router.push('/address');\n  } // get data from Firebase\n\n\n  getFireData() {\n    if (this.props.email == undefined || this.props.email == '') {\n      return;\n    }\n\n    let email = Lib.encodeEmail(this.props.email);\n    let db = firebase.firestore(); // firestore のオブジェクト取得\n\n    db.collection(\"address\").where(\"email\", \"==\", email) //.orderBy(\"email\") //?\n    .get().then(querySnapshot => {\n      let d = Lib.deepcopy(querySnapshot.val());\n      this.props.dispatch({\n        type: 'UPDATE_USER',\n        value: {\n          login: this.props.login,\n          username: this.props.username,\n          email: this.props.email,\n          data: d,\n          items: self.getItem(d)\n        }\n      });\n    }).catch(error => {\n      console.log(`データの取得に失敗しました (${error})`);\n    });\n  }\n  /*\n  let ref = db.ref('address/');\n  let self = this;\n  ref.orderByKey()\n  .equalTo(email)\n  .on('value', (snapshot) => {\n      let d = Lib.deepcopy(snapshot.val());\n      this.props.dispatch({\n          type: 'UPDATE_USER',\n          value: {\n              login: this.props.login,\n              username: this.props.username,\n              email: this.props.email,\n              data: d,\n              items: self.getItem(d)\n          }\n      });\n  });\n  */\n  // data を元に表示項目を作成\n\n\n  getItem(data) {\n    if (data == undefined) {\n      return;\n    }\n\n    let res = [];\n\n    for (let i in data) {\n      for (let j in data[i]) {\n        let email = Lib.decodeEmail(j);\n        let s = data[i][j]['name'];\n        res.push(__jsx(\"li\", {\n          key: j,\n          \"data-tag\": email,\n          onClick: this.go.bind(null, email),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        }, data[i][j]['check'] == true ? __jsx(\"b\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        }, \"\\u2714\\uFE0E\") : '', s, \" (\", email, \")\"));\n      }\n\n      break;\n    }\n\n    return res;\n  } // データ表示ページの移動\n\n\n  go(email) {\n    Router.push('/address_show_email=' + email);\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, __jsx(Account, {\n      onLogined: this.logined,\n      onLogouted: this.logouted,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), __jsx(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, this.props.items == [] ? __jsx(\"li\", {\n      key: \"0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"no item.\") : this.props.items));\n  }\n\n}\n\nAddress = connect(state => state)(Address);\nexport default Address;","map":{"version":3,"sources":["/Users/thesugar/next-firebase-memo-app/components/Address.js"],"names":["React","Component","connect","Router","firebase","Lib","Account","Address","constructor","props","fontSize","padding","logined","bind","getFireData","logouted","push","email","undefined","encodeEmail","db","firestore","collection","where","get","then","querySnapshot","d","deepcopy","val","dispatch","type","value","login","username","data","items","self","getItem","catch","error","console","log","res","i","j","decodeEmail","s","go","render","state"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport Router from 'next/router';\nimport firebase from \"firebase\";\nimport Lib from '../static/address_lib';\nimport Account from '../components/Account';\n\nclass Address extends Component {\n    style = {\n        fontSize: \"12pt\",\n        padding: \"5px 10px\"\n    }\n\n    constructor(props){\n        super(props);\n        this.logined = this.logined.bind(this);\n    }\n\n    // login, logout 処理\n    logined(){\n        this.getFireData();\n    }\n\n    logouted(){\n        Router.push('/address');\n    }\n\n    // get data from Firebase\n    getFireData() {\n        if (this.props.email == undefined ||\n            this.props.email == '') { return;}\n        let email = Lib.encodeEmail(this.props.email);\n        let db = firebase.firestore(); // firestore のオブジェクト取得\n        db.collection(\"address\").where(\"email\", \"==\", email)//.orderBy(\"email\") //?\n        .get()\n        .then((querySnapshot) => {\n            let d = Lib.deepcopy(querySnapshot.val());\n            this.props.dispatch({\n                type: 'UPDATE_USER',\n                value: {\n                    login: this.props.login,\n                    username: this.props.username,\n                    email: this.props.email,\n                    data: d,\n                    items: self.getItem(d)\n                }\n            });\n        })\n        .catch( (error) => {\n           console.log(`データの取得に失敗しました (${error})`);\n        });\n    }\n        /*\n        let ref = db.ref('address/');\n        let self = this;\n        ref.orderByKey()\n        .equalTo(email)\n        .on('value', (snapshot) => {\n            let d = Lib.deepcopy(snapshot.val());\n            this.props.dispatch({\n                type: 'UPDATE_USER',\n                value: {\n                    login: this.props.login,\n                    username: this.props.username,\n                    email: this.props.email,\n                    data: d,\n                    items: self.getItem(d)\n                }\n            });\n        });\n        */\n\n    // data を元に表示項目を作成\n    getItem(data) {\n        if (data == undefined) {return;}\n        let res = [];\n        for (let i in data) {\n            for (let j in data[i]){\n                let email = Lib.decodeEmail(j);\n                let s = data[i][j]['name'];\n\n                res.push(<li key={j} data-tag={email} onClick={this.go.bind(null, email)}>\n                    {data[i][j]['check'] == true?\n                    <b>✔︎</b>: ''}{s} ({email})\n                </li>);\n            }\n            break;\n        }\n        return res;\n    }\n    \n    // データ表示ページの移動\n    go(email){\n        Router.push('/address_show_email=' + email);\n    }\n\n    render(){\n        return (\n            <div>\n                <Account onLogined={this.logined}\n                 onLogouted={this.logouted} />\n                <ul>\n                    {this.props.items == []\n                    ?\n                    <li key=\"0\">no item.</li>\n                    :\n                    this.props.items\n                    }\n                </ul>\n            </div>\n        )\n    }\n}\n\nAddress = connect((state) => state)(Address);\nexport default Address;"]},"metadata":{},"sourceType":"module"}