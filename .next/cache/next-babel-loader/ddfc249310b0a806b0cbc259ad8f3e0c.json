{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/thesugar/next-firebase-memo-app/components/Address.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Router from 'next/router';\nimport firebase from \"firebase\";\nimport Lib from '../static/address_lib';\nimport Account from '../components/Account';\n\nvar Address =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Address, _Component);\n\n  function Address(props) {\n    var _this;\n\n    _classCallCheck(this, Address);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Address).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"style\", {\n      fontSize: \"12pt\",\n      padding: \"5px 10px\"\n    });\n\n    _this.logined = _this.logined.bind(_assertThisInitialized(_this));\n    return _this;\n  } // login, logout 処理\n\n\n  _createClass(Address, [{\n    key: \"logined\",\n    value: function logined() {\n      this.getFireData();\n    }\n  }, {\n    key: \"logouted\",\n    value: function logouted() {\n      Router.push('/address');\n    } // get data from Firebase\n\n  }, {\n    key: \"getFireData\",\n    value: function getFireData() {\n      var _this2 = this;\n\n      if (this.props.email == undefined || this.props.email == '') {\n        return;\n      }\n\n      var email = Lib.encodeEmail(this.props.email);\n      var db = firebase.firestore(); // firestore のオブジェクト取得\n\n      db.collection(\"address\").where(\"email\", \"==\", email) //.orderBy(\"email\") //?\n      .get().then(function (querySnapshot) {\n        var d = Lib.deepcopy(querySnapshot.val());\n\n        _this2.props.dispatch({\n          type: 'UPDATE_USER',\n          value: {\n            login: _this2.props.login,\n            username: _this2.props.username,\n            email: _this2.props.email,\n            data: d,\n            items: self.getItem(d)\n          }\n        });\n      })[\"catch\"](function (error) {\n        console.log(\"\\u30C7\\u30FC\\u30BF\\u306E\\u53D6\\u5F97\\u306B\\u5931\\u6557\\u3057\\u307E\\u3057\\u305F (\".concat(error, \")\"));\n      });\n    }\n    /*\n    let ref = db.ref('address/');\n    let self = this;\n    ref.orderByKey()\n    .equalTo(email)\n    .on('value', (snapshot) => {\n        let d = Lib.deepcopy(snapshot.val());\n        this.props.dispatch({\n            type: 'UPDATE_USER',\n            value: {\n                login: this.props.login,\n                username: this.props.username,\n                email: this.props.email,\n                data: d,\n                items: self.getItem(d)\n            }\n        });\n    });\n    */\n    // data を元に表示項目を作成\n\n  }, {\n    key: \"getItem\",\n    value: function getItem(data) {\n      if (data == undefined) {\n        return;\n      }\n\n      var res = [];\n\n      for (var i in data) {\n        for (var j in data[i]) {\n          var email = Lib.decodeEmail(j);\n          var s = data[i][j]['name'];\n          res.push(__jsx(\"li\", {\n            key: j,\n            \"data-tag\": email,\n            onClick: this.go.bind(null, email),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 82\n            },\n            __self: this\n          }, data[i][j]['check'] == true ? __jsx(\"b\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 84\n            },\n            __self: this\n          }, \"\\u2714\\uFE0E\") : '', s, \" (\", email, \")\"));\n        }\n\n        break;\n      }\n\n      return res;\n    } // データ表示ページの移動\n\n  }, {\n    key: \"go\",\n    value: function go(email) {\n      Router.push('/address_show?email=' + email);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, __jsx(Account, {\n        onLogined: this.logined,\n        onLogouted: this.logouted,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }), __jsx(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, this.props.items == [] ? __jsx(\"li\", {\n        key: \"0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, \"no item.\") : this.props.items));\n    }\n  }]);\n\n  return Address;\n}(Component);\n\nAddress = connect(function (state) {\n  return state;\n})(Address);\nexport default Address;","map":{"version":3,"sources":["/Users/thesugar/next-firebase-memo-app/components/Address.js"],"names":["React","Component","connect","Router","firebase","Lib","Account","Address","props","fontSize","padding","logined","bind","getFireData","push","email","undefined","encodeEmail","db","firestore","collection","where","get","then","querySnapshot","d","deepcopy","val","dispatch","type","value","login","username","data","items","self","getItem","error","console","log","res","i","j","decodeEmail","s","go","logouted","state"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport Router from 'next/router';\nimport firebase from \"firebase\";\nimport Lib from '../static/address_lib';\nimport Account from '../components/Account';\n\nclass Address extends Component {\n    style = {\n        fontSize: \"12pt\",\n        padding: \"5px 10px\"\n    }\n\n    constructor(props){\n        super(props);\n        this.logined = this.logined.bind(this);\n    }\n\n    // login, logout 処理\n    logined(){\n        this.getFireData();\n    }\n\n    logouted(){\n        Router.push('/address');\n    }\n\n    // get data from Firebase\n    getFireData() {\n        if (this.props.email == undefined ||\n            this.props.email == '') { return;}\n        let email = Lib.encodeEmail(this.props.email);\n        let db = firebase.firestore(); // firestore のオブジェクト取得\n        db.collection(\"address\").where(\"email\", \"==\", email)//.orderBy(\"email\") //?\n        .get()\n        .then((querySnapshot) => {\n            let d = Lib.deepcopy(querySnapshot.val());\n            this.props.dispatch({\n                type: 'UPDATE_USER',\n                value: {\n                    login: this.props.login,\n                    username: this.props.username,\n                    email: this.props.email,\n                    data: d,\n                    items: self.getItem(d)\n                }\n            });\n        })\n        .catch( (error) => {\n           console.log(`データの取得に失敗しました (${error})`);\n        });\n    }\n        /*\n        let ref = db.ref('address/');\n        let self = this;\n        ref.orderByKey()\n        .equalTo(email)\n        .on('value', (snapshot) => {\n            let d = Lib.deepcopy(snapshot.val());\n            this.props.dispatch({\n                type: 'UPDATE_USER',\n                value: {\n                    login: this.props.login,\n                    username: this.props.username,\n                    email: this.props.email,\n                    data: d,\n                    items: self.getItem(d)\n                }\n            });\n        });\n        */\n\n    // data を元に表示項目を作成\n    getItem(data) {\n        if (data == undefined) {return;}\n        let res = [];\n        for (let i in data) {\n            for (let j in data[i]){\n                let email = Lib.decodeEmail(j);\n                let s = data[i][j]['name'];\n\n                res.push(<li key={j} data-tag={email} onClick={this.go.bind(null, email)}>\n                    {data[i][j]['check'] == true?\n                    <b>✔︎</b>: ''}{s} ({email})\n                </li>);\n            }\n            break;\n        }\n        return res;\n    }\n    \n    // データ表示ページの移動\n    go(email){\n        Router.push('/address_show?email=' + email);\n    }\n\n    render(){\n        return (\n            <div>\n                <Account onLogined={this.logined}\n                 onLogouted={this.logouted} />\n                <ul>\n                    {this.props.items == []\n                    ?\n                    <li key=\"0\">no item.</li>\n                    :\n                    this.props.items\n                    }\n                </ul>\n            </div>\n        )\n    }\n}\n\nAddress = connect((state) => state)(Address);\nexport default Address;"]},"metadata":{},"sourceType":"module"}