{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/thesugar/next-todo-app/components/Account.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport firebase from \"firebase\";\n\nvar Account =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Account, _Component);\n\n  function Account(props) {\n    var _this;\n\n    _classCallCheck(this, Account);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Account).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"style\", {\n      fontSize: \"12pt\",\n      padding: \"5px 10px\"\n    });\n\n    _this.login_check = _this.login_check.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Account, [{\n    key: \"login\",\n    value: function login() {\n      var _this2 = this;\n\n      var provider = new firebase.auth.GoogleAuthProvider();\n      var self = this;\n      firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL);\n      firebase.auth().signInWithPopup(provider).then(function (result) {\n        /*\n        this.props.dispatch({\n            type: 'UPDATE_USER',\n            value: {\n                login: true,\n                username: result.user.displayName,\n                email: result.user.email,\n                data:this.props.data,\n                items:this.props.items\n            }\n        });\n        */\n        _this2.props.onLogined();\n      });\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      console.log(\"logout\");\n      firebase.auth().signOut();\n      this.props.dispatch({\n        type: 'UPDATE_USER',\n        value: {\n          login: false,\n          username: '(click here!)',\n          email: '',\n          data: [],\n          items: []\n        }\n      });\n      this.props.onLogouted();\n    } // check if user is logged in or logged out\n\n  }, {\n    key: \"login_check\",\n    value: function login_check() {\n      if (this.props.login == false) {\n        this.login();\n      } else {\n        this.logout();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"p\", {\n        className: \"login\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, __jsx(\"span\", {\n        className: \"acount\",\n        onClick: this.login_check,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"LOGINED: \", this.props.currentUser ? this.props.currentUser : 'ログインしてよ〜'));\n    }\n  }]);\n\n  return Account;\n}(Component);\n\nAccount = connect(function (state) {\n  return state;\n})(Account);\nexport default Account;","map":{"version":3,"sources":["/Users/thesugar/next-todo-app/components/Account.js"],"names":["React","Component","connect","firebase","Account","props","fontSize","padding","login_check","bind","provider","auth","GoogleAuthProvider","self","setPersistence","Auth","Persistence","LOCAL","signInWithPopup","then","result","onLogined","console","log","signOut","dispatch","type","value","login","username","email","data","items","onLogouted","logout","currentUser","state"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,QAAP,MAAqB,UAArB;;IAEMC,O;;;;;AAMF,mBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AACd,iFAAMA,KAAN;;AADc,4DALV;AACJC,MAAAA,QAAQ,EAAE,MADN;AAEJC,MAAAA,OAAO,EAAE;AAFL,KAKU;;AAEd,UAAKC,WAAL,GAAmB,MAAKA,WAAL,CAAiBC,IAAjB,+BAAnB;AAFc;AAGjB;;;;4BAEM;AAAA;;AACH,UAAIC,QAAQ,GAAG,IAAIP,QAAQ,CAACQ,IAAT,CAAcC,kBAAlB,EAAf;AACA,UAAIC,IAAI,GAAG,IAAX;AACAV,MAAAA,QAAQ,CAACQ,IAAT,GAAgBG,cAAhB,CAA+BX,QAAQ,CAACQ,IAAT,CAAcI,IAAd,CAAmBC,WAAnB,CAA+BC,KAA9D;AACAd,MAAAA,QAAQ,CAACQ,IAAT,GAAgBO,eAAhB,CAAgCR,QAAhC,EACCS,IADD,CACM,UAACC,MAAD,EAAY;AACd;;;;;;;;;;;;AAYA,QAAA,MAAI,CAACf,KAAL,CAAWgB,SAAX;AACH,OAfD;AAgBH;;;6BAEO;AACJC,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACApB,MAAAA,QAAQ,CAACQ,IAAT,GAAgBa,OAAhB;AACA,WAAKnB,KAAL,CAAWoB,QAAX,CAAoB;AAChBC,QAAAA,IAAI,EAAE,aADU;AAEhBC,QAAAA,KAAK,EAAE;AACHC,UAAAA,KAAK,EAAE,KADJ;AAEHC,UAAAA,QAAQ,EAAE,eAFP;AAGHC,UAAAA,KAAK,EAAE,EAHJ;AAIHC,UAAAA,IAAI,EAAE,EAJH;AAKHC,UAAAA,KAAK,EAAE;AALJ;AAFS,OAApB;AAUA,WAAK3B,KAAL,CAAW4B,UAAX;AACH,K,CAED;;;;kCACa;AACT,UAAI,KAAK5B,KAAL,CAAWuB,KAAX,IAAoB,KAAxB,EAA8B;AAC1B,aAAKA,KAAL;AACH,OAFD,MAEO;AACH,aAAKM,MAAL;AACH;AACJ;;;6BAEO;AAEJ,aACI;AAAG,QAAA,SAAS,EAAC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAM,QAAA,SAAS,EAAC,QAAhB;AACA,QAAA,OAAO,EAAE,KAAK1B,WADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEc,KAAKH,KAAL,CAAW8B,WAAX,GAAyB,KAAK9B,KAAL,CAAW8B,WAApC,GAAkD,UAFhE,CADJ,CADJ;AAQH;;;;EApEiBlC,S;;AAuEtBG,OAAO,GAAGF,OAAO,CAAC,UAACkC,KAAD;AAAA,SAAWA,KAAX;AAAA,CAAD,CAAP,CAA0BhC,OAA1B,CAAV;AACA,eAAeA,OAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport firebase from \"firebase\";\n\nclass Account extends Component {\n    style = {\n        fontSize: \"12pt\",\n        padding: \"5px 10px\"\n    }\n\n    constructor(props){\n        super(props);\n        this.login_check = this.login_check.bind(this);\n    }\n\n    login(){\n        let provider = new firebase.auth.GoogleAuthProvider();\n        let self = this;\n        firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL);\n        firebase.auth().signInWithPopup(provider)\n        .then((result) => {\n            /*\n            this.props.dispatch({\n                type: 'UPDATE_USER',\n                value: {\n                    login: true,\n                    username: result.user.displayName,\n                    email: result.user.email,\n                    data:this.props.data,\n                    items:this.props.items\n                }\n            });\n            */\n            this.props.onLogined();\n        });\n    }\n\n    logout(){\n        console.log(\"logout\");\n        firebase.auth().signOut();\n        this.props.dispatch({\n            type: 'UPDATE_USER',\n            value: {\n                login: false,\n                username: '(click here!)',\n                email: '',\n                data: [],\n                items: []\n            }\n        });\n        this.props.onLogouted();\n    }\n\n    // check if user is logged in or logged out\n    login_check(){\n        if (this.props.login == false){\n            this.login();\n        } else {\n            this.logout();\n        }\n    }\n\n    render(){\n\n        return (\n            <p className=\"login\">\n                <span className=\"acount\"\n                onClick={this.login_check}>\n                    LOGINED: {this.props.currentUser ? this.props.currentUser : 'ログインしてよ〜'}\n                </span>\n            </p>\n        );\n    }\n}\n\nAccount = connect((state) => state)(Account);\nexport default Account;"]},"metadata":{},"sourceType":"module"}