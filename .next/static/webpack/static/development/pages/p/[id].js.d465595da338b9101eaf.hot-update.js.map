{"version":3,"file":"static/webpack/static/development/pages/p/[id].js.d465595da338b9101eaf.hot-update.js","sources":["webpack:///./components/TaskDetail.js"],"sourcesContent":["import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport Router from 'next/router';\nimport firebase from \"firebase\";\nimport Lib from '../static/address_lib';\nimport Account from '../components/Account';\nimport Link from 'next/link';\n\nclass Address extends Component {\n    style = {\n        fontSize: \"12pt\",\n        padding: \"5px 10px\"\n    }\n\n    constructor(props){\n        super(props);\n        this.logined = this.logined.bind(this);\n    }\n\n    // login, logout 処理\n    logined(){\n        this.getFireData();\n    }\n\n    logouted(){\n        Router.push('/address');\n    }\n\n    // get data from Firebase\n    getFireData() {\n        // 個別タスクのページを直接開いてそこでログインを行った場合のみ\n        // ここで Firestore からのデータ取得が行われる。\n        // タスク一覧から遷移した場合は props を読むので Firestore との通信は行われない（はず）。\n        if (firebase.auth().currentUser == undefined ||\n            firebase.auth().currentUser == null) { return;}\n\n        let db = firebase.firestore(); // firestore のオブジェクト取得\n    \n        let ref = db.collection('tasks');\n        let self = this;\n        ref.get()\n        .then(function(querySnapshot) {\n            let d = [];\n\n            querySnapshot.forEach((doc, index, querySnapshot) => {\n            // doc.data() is never undefined for query doc snapshots\n            console.log(doc.id, \" => \", doc.data());\n            d.push(Lib.deepCopy(doc.data()));\n            \n            // d.push してるのにループのたびにdispatchしてるから無駄な部分はある\n            // forEach の中で querySnapshot の length が取得できればいいが、、\n            self.props.dispatch({\n                type: 'UPDATE_USER',\n                value: {\n                    login: self.props.login,\n                    username: self.props.username,\n                    email: self.props.email,\n                    data: d,\n                    items: self.getItem(d)\n                    }\n            })\n            \n        })\n        \n        });\n    }\n\n    // data を元に表示項目を作成\n    getItem(data) {\n        \n        console.log('data is');\n        console.log(data);\n        if (data == undefined) {return;}\n        let res = [];\n        for (let i=0; i < data.length; i++){\n        res.push(<li key={i}>\n                <Link href=\"/p/[id]\" as={`/p/${data[i]['title']}`} info={data[i]}>\n                    <a>{data[i]['title']}</a>\n                 </Link>\n                    <ul>\n                        <li key={1}>{data[i]['detail']}</li>\n                        <li key={2}>{new Date(data[i]['deadline'].seconds * 1000).toLocaleDateString()}</li>\n                    </ul>\n                </li>);\n        }\n        return res;\n    }\n\n    render(){\n        return (\n            <div>\n                <Account onLogined={this.logined}\n                 onLogouted={this.logouted} />\n                <ul>\n                    {this.props.items == []\n                    ?\n                    <li key=\"0\">no item.</li>\n                    :\n                    <div>\n                    <h1>{this.props.taskData[this.props.docId]['title']}</h1>\n                    <h2>詳細</h2>\n                    <h3>{this.props.taskData[this.props.docId]['detail']}</h3>\n                    <h2>状態</h2>\n                    <h3>{this.props.taskData[this.props.docId]['state']}</h3>\n                    <h2>期日</h2>\n                    <h3>{new Date(this.props.taskData[this.props.docId]['deadline'].seconds * 1000).toLocaleDateString()}</h3>\n                    <h2>このタスクの登録者</h2>\n                    <h3>{this.props.taskData[this.props.docId]['publisher']}</h3>\n                    <h2>グループ名</h2>\n                    <h3>{this.props.taskData[this.props.docId]['concerns']}</h3>\n                    <p>タスクの内容を編集する</p>\n                    <p>タスクを削除する</p>\n                    </div>\n                    }\n                </ul>\n            </div>\n        )\n    }\n}\n\nAddress = connect((state) => state)(Address);\nexport default Address;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAMA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAJA;AACA;AAFA;AACA;AAMA;AAFA;AAGA;AACA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAFA;AAWA;AAEA;AACA;AACA;;;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;;;;AA7GA;AACA;AA+GA;AAAA;AAAA;AACA;;;;A","sourceRoot":""}